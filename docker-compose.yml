services:
  postgres:
    image: postgres:16
    container_name: projetointegrador_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${PG_EXTERNAL_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  server:
    build:
      context: .
      dockerfile: infra/docker/server.Dockerfile
      target: production
    container_name: projetointegrador_server
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SERVER_PORT=${SERVER_PORT}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  client:
    build:
      context: .
      dockerfile: infra/docker/client.Dockerfile
    container_name: projetointegrador_client
    environment:
      - VITE_API_URL=${VITE_API_URL}
      - VITE_CLIENT_PORT=${CLIENT_PORT}
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    depends_on:
      - server
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
